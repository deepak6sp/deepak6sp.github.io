---
layout: post
title:  "React/Redux application and testing"
date:   2017-03-09 22:21:57 +1100
categories: Development
---

Redux is a predictable state container for JavaScript apps. However, it can be combined with other js libraries such as React. We will divide the application development into
3 parts.

Part 1 <br/>
<a class="smooth-scroll" href="#getting-started">Getting started with a simple react application</a>

Part 2 <br/>
<a class="smooth-scroll" href="#extending-app">Extending it to a redux application</a>

Part 3 <br/>
<a class="smooth-scroll" href="#testing-app">Testing using Mocha, Chai and Enzyme</a>

<br/>
<h5 class="blue-text text-darken-2" id="getting-started">Getting started with a simple react application</h5>

If u have not have installed node on your system, here is a quick tutorial about how to install latest version of node and npm. <a target="\_blank" href="https://docs.npmjs.com/getting-started/installing-node">https://docs.npmjs.com/getting-started/installing-node</a>

Lets create a new directory

<pre>$ touch simple-redux-application</pre>

and then add “index.html” file  and “scripts” folder as our starting point.

After installing , on command prompt do  

<pre>$ npm init</pre>

and follow through all the required fields. This will create a new file package.json in current directory. The final package.json file will look like this.
<img src="/assets/images/simple-redux-6.png"/>


We will use webpack as our build tool for react jsx and es6 transformation. In the root folder of the project, create <strong>webpack.config.js</strong> :

{% highlight ruby %}
module.exports = {
  entry: [
    './scripts/index.js'
  ],
  output: {
    path: \__dirname,
    publicPath: '/',
    filename: 'public/bundle.js'
  },
  module: {
    loaders: [{
      exclude: /node_modules/,
      loader: 'babel'
    }]
  },
  resolve: {
    extensions: ['', '.js', '.jsx']
  },
  devServer: {
    contentBase: './'
  }
};
{% endhighlight %}

Lets install node module dependencies required for our development.

<pre>$ npm install —save react react-dom
$ npm install —save-dev  webpack  webpack-dev-server babel-core babel-loader babel-preset-es2015 babel-preset-react </pre>


Now , in index.html file , in body section add
{% highlight ruby %}
<body>
    <div id="main"></div>
    <script src="./bundle.js"></script>
</body>
{% endhighlight %}


where, bundle.js is a script file generated by webpack during runtime as specified in webpack.js.config file under Output configuration


Now under Scripts folder, create a new file <strong>index.js</strong>:
<img src="/assets/images/simple-redux-5.png"/>

Now on the terminal, enter this command,
<pre>$ npm start</pre>

Go to http://localhost:8080/webpack-dev-server/  on your browser.

Your webpage should display as shown.
<img src="/assets/images/simple-redux-1.png"/>

Congrats! you have successfully implemented a react application.

<br/>
<h5 class="blue-text text-darken-2" id="extending-app">Extending it to a redux application</h5>
Lets quickly dive into implementing redux . We will aim to display an item list and the final page will look as below.

<img src="/assets/images/simple-redux-2.png"/>
To start, we will install common npm dependencies.

<pre>$ npm install --save redux and react-redux </pre>

We shall modify our <strong>index.js</strong> :
{% highlight ruby %}
import React, { Component } from "react";
import ReactDOM from "react-dom";
import { Provider } from 'react-redux';
import { createStore, applyMiddleware } from 'redux';
import reducers from './reducers';
import Main from "./components/main";

const createStoreWithMiddleware = applyMiddleware()(createStore);

ReactDOM.render(
  <Provider store={createStoreWithMiddleware(reducers)}>
    <Main />
  </Provider>, document.getElementById(“main")
);
{% endhighlight %}


Create 2 folders, components and reducers. Reducers are just pure functions.

In components directory, create 2 files, main.js and list.js.

In <strong>main.js</strong> :
{% highlight ruby %}
import React, { Component } from "react";
import ReactDOM from "react-dom";
import List from "./list";

class Main extends Component {
  constructor(props) {
    super(props);
  }
  render(){
    return (
      <div>      
        <h1>Simple redux application</h1>
        <List />
      </div>
    );
  }
}

export default Main
{% endhighlight %}




In <strong>list.js</strong> :

{% highlight ruby %}
import React, { Component } from "react";
import ReactDOM from "react-dom";
import { connect } from "react-redux";
import {bindActionCreators} from 'redux';
import Lists from "./../reducers";
import { displayList } from “./../actions";

class List extends Component {
  constructor(props) {
    super(props);
  }
  render(){
    let ListItems = this.props.List.map((element,index) =>{
      return (
        <li key={index}> {element}</li>
      );
    });

    return (
      <div>
        <h3> Item List </h3>
        <ul> {ListItems} </ul>
      </div>
    );
  }
}

function mapStateToProps(state){
   return  {
        List: state.Lists
   }
}

function mapDispatchToProps(dispatch){
  const actions = {displayList};

  return bindActionCreators(actions, dispatch);
}

export default connect(mapStateToProps, mapDispatchToProps)(List)
{% endhighlight %}


In reducers directory, create 2 files index.js and list_reducers.js

In <strong>index.js</strong> :

{% highlight ruby %}
import { combineReducers } from "redux";
import ListReducer from “./list_reducer";

const RootReducer =  combineReducers({
  Lists : ListReducer
});

export default RootReducer;
{% endhighlight %}

Notice, that we have user combineReducers from redux to combine all reducers into the
array of root reducers which is inturn exported to list.js component.

In <strong>list_reducers.js</strong> :
{% highlight ruby %}
export default function (){
  return [
    "learning react application",
    "learning redux application",
    "learning javascript testing",
    "learning redux testing”
  ]
}
{% endhighlight %}


Now, run webpack again,

<pre>$npm start</pre>

Output :
<img src="/assets/images/simple-redux-2.png"/>

But wait, We will also implement actions and change the state to re-render components based on actions? So, lets go head and implement actions.

Create new folder actions under scripts.
Create 2 files index.js and action_types.js

In <strong>action_types.js</strong> :

<pre>
  export const DISPLAYLIST = “DISPLAYLIST";
</pre>

and, in <strong>index.js</strong> :
{% highlight ruby %}
import { DISPLAYLIST } from './actions_types';

export const displayList = () => {
	return {
		type: DISPLAYLIST,
		payload : [
			"learning react application",
			"learning redux application",
			"learning javascript testing",
			"learning redux testing"
		]
	}
}
{% endhighlight %}

Now, we need to tweak component/list.js and reducers/list_reducers.js

In list_reducers.js :
{% highlight ruby %}
import { DISPLAYLIST } from './../actions/actions_types';

export default (state = [],action)=> {
	switch (action.type){
		case DISPLAYLIST : return action.payload;
		default : return state

	}
}
{% endhighlight %}

In list.js, we will add hide show button.
<pre>
<button onClick={this._showHideList.bind(this)}>{showHideText}</button>
</pre>
 _showHideList() will hide/show list

Now, again run webpack,
<pre>$npm run start</pre>

Congrats! you have successfully running a redux application.

<br/>
<h5 class="blue-text text-darken-2" id="testing-app">Testing using Mocha, Chai and Enzyme</h5>

Now, we will jump to testing our components.

Let us first create tests directory in root folder, and also, use the same hierarchy as scripts folder to write out test files.

So, in tests create components folder and in components folder, create test_main.js.

Now, we will install npm dependencies.

<pre>$ npm install —save-dev mocha chai enzyme</pre>

Note:Enzyme uses several of the utilities provided by React to build its API, So if you encounter error, please install  react-addons-test-utils as dependency.

<pre>$ npm install —save  react-addons-test-utils</pre>

In <strong>test_main.js</strong> :

<pre>
import { expect } from "chai";
import { shallow } from "enzyme";
</pre>

we shall also import component we need to test
<pre>
import React from "react";
import Main from “../../scripts/components/main";
</pre>

Now we shall start writing test. We make our first assertion.<br>
Lets assume, **h1 tag to always display the text “Simple redux application”**.

So, in <strong>test_main.js</strong>,
{% highlight ruby %}
describe("<Main />", () => {
  it("h1 should display text", () =>{
    const wrapper = shallow(<Main/>);
    const h1= wrapper.find("h1");
    expect(h1.text()).to.contain("Simple redux application");
  });
});
{% endhighlight %}

then in package.json file, inside scripts add 2 more line to run mocha
{% highlight ruby %}
"scripts": {
    "start": "node ./node_modules/webpack-dev-server/bin/webpack-dev-server.js",
    "test": "mocha --compilers js:babel-register --recursive ./tests",
    "test:watch": "npm test -- --watch"
}
{% endhighlight %}

Now, in the terminal, type
<pre>
$ npm run test or
$ npm run test:watch // to keep track of every change you make
</pre>

<img src="/assets/images/simple-redux-4.png"/>

You could see how it fails by changing the actual text in the component itself.

Congrats , you have successfully passed the first test of redux application.

The complete project can be found at
<a target="_blank" href="https://github.com/deepak6sp/simple-redux-application">https://github.com/deepak6sp/simple-redux-application</a>
